class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # dp[i][j]代表以i，j结束
        dp = [[0 for _ in range(len(word2)+1)] for _ in range(len(word1)+1)]
        
        for i in range(len(word1)+1):
            dp[i][0] = i
        for j in range(len(word2)+1):
            dp[0][j] = j
            
        for i in range(1, len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1)
                    
        return dp[-1][-1]
        
        
        
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        # dp[i][j]代表从i，j开始
        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

        for i in range(m):
            dp[i][n] = m - i 
        for j in range(n):
            dp[m][j] = n - j

        for i in reversed(range(m)):
            for j in reversed(range(n)):
                if word1[i] == word2[j]:
                    dp[i][j] = dp[i+1][j+1]
                else:
                    dp[i][j] = min(dp[i+1][j], dp[i][j+1]) + 1
        
        return dp[0][0]
