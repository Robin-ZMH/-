# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # 递归
    def isSymmetric(self, root: TreeNode) -> bool:
        def process(node1, node2):
            if node1 == None and node2 == None:
                return True
            elif node1 == None or node2 == None:
                return False
            elif node1.val != node2.val:
                return False
            return process(node1.left, node2.right) and process(node1.right, node2.left)
        return process(root.left, root.right)
        
        
    # 广度优先  
    def isSymmetric(self, root: TreeNode) -> bool:
        queue = deque([root])
        li = [root.val]
        while queue:
            if li != li[::-1]:
                return False
            li.clear()
            for _ in range(len(queue)):
                node = queue.popleft()
                if node.left:
                    queue.append(node.left)
                    li.append(node.left.val)
                else:
                    li.append(None)
                if node.right:
                    queue.append(node.right)
                    li.append(node.right.val)
                else:
                    li.append(None)
        return True
