class Solution:
    # 树形dp
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        def dfs(index1, index2):
            if (index1, index2) in memo:
                return memo[(index1, index2)]

            if index1 >= len(nums1) or index2 >= len(nums2):
                return 0
            if nums1[index1] == nums2[index2]:
                memo[(index1, index2)] = dfs(index1+1, index2+1) + 1
                return memo[(index1, index2)]
            else:
                memo[(index1, index2)] = max(dfs(index1+1, index2), dfs(index1, index2+1))
                return memo[(index1, index2)]
                
        memo = dict()
        return dfs(0, 0)
        
        
class Solution:
    # 动态规划
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        m, n = len(nums1), len(nums2)
        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]

        for i in reversed(range(m)):
            for j in reversed(range(n)):
                if nums1[i] == nums2[j]:
                    dp[i][j] = dp[i+1][j+1] + 1
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j+1])

        return dp[0][0]
