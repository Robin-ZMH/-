class Solution:
    """暴力递归"""
    def uniquePaths(self, m: int, n: int) -> int:
        def process(m, n):
            if m < 1 or n < 1:
                return 0
            if m == 1 and n == 1:
                return 1
            return process(m-1, n) + process(m, n-1)
        return process(m, n)


class Solution:
    """树形dp"""
    def uniquePaths(self, m: int, n: int) -> int:
        def process(m, n):
            if m < 1 or n < 1:
                return 0
            if m == 1 and n == 1:
                return 1
            if (m, n) in dp:
                return dp[(m, n)]
            res = process(m-1, n) + process(m, n-1)
            dp[(m, n)] = res
            return dp[(m, n)]
             
        dp = dict()
        return process(m, n)
        
        
class Solution:
    """动态规划"""
    def uniquePaths(self, m: int, n: int) -> int:   
        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
        dp[1][1] = 1
        for i in range(1, m+1):
            for j in range(1, n+1):
                if i == 1 and j == 1:
                    continue
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[m][n]
