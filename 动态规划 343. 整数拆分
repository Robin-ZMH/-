class Solution:
    """树形dp"""
    def integerBreak(self, n: int) -> int:
        def process(n):
            if n == 1: return 1
            if n == 2: return 1
            if n == 3: return 2
            if n in dp:
                return dp[n]
            res = 1
            for i in range(2, n // 2 + 1):
                res = max(res, i * max(process(n-i), n-i))
            dp[n] = res
            return res
        
        dp = dict()
        return process(n)


class Solution:
    """动态规划"""
    def integerBreak(self, n: int) -> int:
        dp = [0 for _ in range(n+1)]
        dp[1], dp[2] = 1, 1
        for num in range(3, n+1):
            res = 1
            for i in range(1, num // 2 + 1):
                res = max(res, i * max(dp[num-i], num-i))
            dp[num] = res
        return dp[n]
