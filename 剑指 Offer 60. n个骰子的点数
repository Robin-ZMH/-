class Solution:
    """暴力递归"""
    def dicesProbability(self, n: int) -> List[float]:
        # 投掷n次骰子，点数和 pointSum 出现的次数
        def getCount(n, pointSum):
            if pointSum < n or pointSum > n*6:
                return 0
            if n == 1:
                return 1
            res = 0
            for i in range(1, 7):
                res += getCount(n - 1, pointSum - i)
            return res

        res = [0 for _ in range(6*n - n + 1)]
        for i in range(n, n * 6 + 1):
            res[i-n] = getCount(n, i) / 1/6 ** n
        return res


class Solution:
    """树形dp"""
    def dicesProbability(self, n: int) -> List[float]:
        # 投掷n次骰子，点数和 pointSum 出现的次数
        def getCount(n, pointSum, dp):
            if pointSum < n or pointSum > n * 6:
                return 0
            if n == 1:
                return 1
            if (n, pointSum) in dp:
                return dp[(n, pointSum)]
            res = 0
            for i in range(1, 7):
                res += getCount(n - 1, pointSum - i, dp)
            dp[(n, pointSum)] = res
            return dp[(n, pointSum)]

        dp = dict()
        res = [0 for _ in range(6 * n - n + 1)]
        for pointSum in range(n, n * 6 + 1):
            res[pointSum - n] = getCount(n, pointSum, dp) / 1 / 6 ** n
        return res


class Solution:
    """动态规划"""
    def dicesProbability(self, n: int) -> List[float]:
        dp = dict()
        for i in range(1, 7):
            dp[(1, i)] = 1
        for i in range(2, n+1):
            for pointSum in range(i, 6*i + 1):
                dp[(i, pointSum)] = 0
                for point in range(1, 7):
                    if (i-1, pointSum - point) in dp:
                        dp[(i, pointSum)] += dp[(i-1, pointSum - point)]

        res = [0 for _ in range(6*n - n + 1)]
        for pointSum in range(n, n * 6 + 1):
            res[pointSum-n] = dp[(n, pointSum)] / 1/6 ** n
        return res
