class Solution:
    def solve(self, board: List[List[str]]) -> None:
        n, m = len(board), len(board[0])
        def dfs(x, y):
            if not 0 <= x < n or not 0 <= y < m or board[x][y] != 'O':
                return
            board[x][y] = "A"
            dfs(x + 1, y)
            dfs(x - 1, y)
            dfs(x, y + 1)
            dfs(x, y - 1)
        # 将处于边界的'O'和与其相连接的所有'O'设为'A'
        # 上下两条边
        for i in range(n):
            dfs(i, 0)
            dfs(i, m - 1)
        # 左右两条边
        for i in range(m - 1):
            dfs(0, i)
            dfs(n - 1, i)
        # 剩下的'O'必然被'X'包裹，因为无法从边界出发找到它们
        for i in range(n):
            for j in range(m):
                if board[i][j] == "A":
                    board[i][j] = "O"
                elif board[i][j] == "O":
                    board[i][j] = "X"
