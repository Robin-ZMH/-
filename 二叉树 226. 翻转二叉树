# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # 递归，前序遍历
    def invertTree(self, root: TreeNode) -> TreeNode:
        if root:
            root.left, root.right = root.right, root.left
            self.invertTree(root.left)
            self.invertTree(root.right)
        return root
        
        
    # 迭代，前序遍历    
    def invertTree(self, root: TreeNode) -> TreeNode:
        stack = []
        node = root
        while node or stack:
            while node:
                stack.append(node)
                node.left, node.right = node.right, node.left
                node = node.left
            father = stack.pop()
            node = father.right
        return root
        
        
    # 迭代，广度优先    
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return
        stack = [root]
        while stack:
            for _ in range(len(stack)):
                node = stack.pop()
                node.left, node.right = node.right, node.left
                if node.left: stack.append(node.left)
                if node.right: stack.append(node.right)
        return root
