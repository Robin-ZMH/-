class Solution:
    """暴力递归"""
    def numTrees(self, n: int) -> int:
        def process(n):
            if n == 0: return 1
            res = 0
            for i in range(n):
                res += process(i) * process(n - i - 1)
            return res
        return process(n)
        

class Solution:
    """树形dp"""
    def numTrees(self, n: int) -> int:
        def process(n):
            if n == 0: return 1
            if n in dp: return dp[n]
            res = 0
            for i in range(n):
                # 左子树个数 * 右子树个数
                res += process(i) * process(n - i - 1)
            dp[n] = res
            return res

        dp = dict()
        return process(n)
        
        
class Solution:
    """动态规划"""
    def numTrees(self, n: int) -> int:
        dp = [0 for _ in range(n + 1)]
        dp[0] = 1
        for i in range(1, n+1):
            for j in range(i):
                dp[i] += dp[j] * dp[i - j - 1] 
        return dp[n]
